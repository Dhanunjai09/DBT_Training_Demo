
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_training'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_training'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbt_training:
    example:
      +materialized: view
    dbt_test:
      +materialized: table  
      +database: "{{ target.database }}"
#      +pre-hook:
#        - "{{ log_model_events(this.name, 'start', 'model execution started') }}"
      # Remove post-hook — error cases won’t reach here

seeds:
  dbt_training:
    +database: "{{ target.database }}"
#    +pre-hook: 
#      - "{{ log_model_events(this.name, 'start', 'seed execution started') }}"
    # Note: post-hook not reliable for failed seeds — capture in on-run-end

# Global Hooks
on-run-start:
  - "{{ log_run_start() }}"

on-run-end:
  - "{{ log_run_results() }}"

#on-run-end:
#  - >
#    {% for result in results if result.status != 'success' %}
#    {{ log_model_events('error', 'Failure:' ~ result.message) }}
#    {% endfor %}